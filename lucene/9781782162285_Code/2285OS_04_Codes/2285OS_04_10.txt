public class MyCollector extends Collector {
    private int totalHits = 0;
    private int docBase;
    private Scorer scorer;
    private List<ScoreDoc> topDocs = new ArrayList();
    private ScoreDoc[] scoreDocs;

    public MyCollector() { }

    public void setScorer(Scorer scorer) {
        this.scorer = scorer;
    }

    public boolean acceptsDocsOutOfOrder() {
        return false;
    }

    public void collect(int doc) throws IOException {
        float score = scorer.score();
        if (score > 0) {
            score += (1 / (doc + 1));
        }
        ScoreDoc scoreDoc = 
            new ScoreDoc(doc + docBase, score);
        topDocs.add(scoreDoc);
        totalHits++;
    }

    public void setNextReader(AtomicReaderContext context) {
        this.docBase = context.docBase;
    }

    public int getTotalHits() {
        return totalHits;
    }

    public ScoreDoc[] getScoreDocs() {
        if (scoreDocs != null) {
            return scoreDocs;
        }
        Collections.sort(topDocs, 
          new Comparator<ScoreDoc>() {
            public int compare(ScoreDoc d1, ScoreDoc d2) {
                if (d1.score > d2.score) {
                    return -1;
                } else if (d1.score == d2.score) {
                    return 0;
                } else {
                    return 1;
                }
            }
        });
        scoreDocs = topDocs.toArray(
            new ScoreDoc[topDocs.size()]);
        return scoreDocs;
    }
}
