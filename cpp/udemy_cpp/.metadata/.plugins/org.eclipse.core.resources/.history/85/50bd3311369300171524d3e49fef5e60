//============================================================================
// Name        : Vector.cpp
// Author      : Ethen
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <vector>
#include <map>
using namespace std;


class Person {
private:
	string name;
	int age;

public:
	Person(): name(""), age(0) {
		// default constructor required
		// for using custom objects as values;
		// because map[key] will first create a
		// empty value of the same type and then
		// copy the value over
	}

	Person(string name, int age) {
		this->name = name;
		this->age = age;
	}

	void print() const {
		cout << name << ": " << age << endl;
	}

	bool operator<(const Person &other) const {
		// 1. the reference is efficient since we don't want to make a copy
		// 2. const Person because we don't want a less operator to be
		// able to modify the object;
		// 3. const function because we also don't want the operator to be
		// able to modify the object itself
		if (name == other.name) {
			return age < other.age;
		} else {
			return name < other.name;
		}
	}
};

int main() {
	// create a vector (resizable array) of string type
	// and pre-size the vector (not necessary)
	vector<string> strings(3);

	// the square bracket is overloaded for the vector class,
	// so we can directly modify the element of the vector;
	// note that this operation is undefined for element outside
	// the vector (i.e. when the initialized size is 5, we can't
	// use strings[9] = "ten", since it's out of bounds
	strings[0] = "one";
	strings[1] = "two";
	strings[2] = "three";
	cout << strings[2] << endl;

	// add more elements to the vector
	strings.push_back("four");
	cout << strings.size() << endl;

	// the .begin will give us an iterator that points to the first element
	// of the vector
	vector<string>::iterator it;
    for (it = strings.begin(); it != strings.end(); it++) {
        cout << *it << " ";
    }
    cout << endl;


    // Maps
    map<string, int> ages;
    ages["Mike"] = 40;
    ages["Vicky"] = 30;

    // check whether a key exists in the dictionary,
    // if the key is not in the dictionary, the .find method
    // will return the end of the iterator
    if (ages.find("Vicky") != ages.end()) {
    	cout << "Found Vicky" << endl;
    } else {
    	cout << "Vicky not Found" << endl;
    }

    // looping through maps using iterator
    map<string, int>::iterator i;
    for (i = ages.begin(); i != ages.end(); i++) {
    	cout << i->first << ": " << i->second << endl;
    }

    // the iterator of the map is actually a pair,
    // thus we can deference the pointer and access the
    // .first and .second attribute from the pair data structure
    for (i = ages.begin(); i != ages.end(); i++) {
    	pair<string, int> element = *i;
    	cout << element.first << ": " << element.second << endl;
    }


    // custom objects as map values
    cout << "Custom objects as map values" << endl;
    map<int, Person> people;
    people[0] = Person("Mike", 40);
    people[1] = Person("Vicky", 30);
    people[2] = Person("Raj", 20);
    map<int, Person>:: iterator i1;
    for (i1 = people.begin(); i1 != people.end(); i1++) {
    	i1->second.print();
    }

    cout << person[0] << person[1] << endl;

	return 0;
}
