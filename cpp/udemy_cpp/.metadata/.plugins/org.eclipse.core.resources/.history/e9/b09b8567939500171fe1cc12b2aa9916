//============================================================================
// Name        : Templates.cpp
// Author      : Ethen
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
using namespace std;


// for templates, define all the definition and actual implementation
// in the header files

// after defining the class T, T is now a generic type that we can use
template<class T>
class Test {
	// assume that the operator is implemented correctly for the type
	// that the user passed in;
	// Note that when defining template, it's bad practice to interrogate
	// what kind of methods that class has and call it when it has them
private:
	T obj;

public:
	Test(T obj) {
		this->obj = obj;
	}

	void print() {
		cout << obj << endl;
	}
};


// we can also have template functions and
// the typename and class keyword in the template definition
// and be used interchangeably
template<typename T>
void print(T n) {
	cout << "Template version: " << n << endl;
}

void print(int n) {
	cout << "Non-Template version: " << n << endl;
}

void test() {
	cout << "Hello" << endl;
}

int main() {
	Test<string> test1("Hello1");
	test1.print();

	print<string>("Hello2");
	// the print function that explicitly says it accepts an integer type
	// will be a better match than the template version
	print(5);

	// explicitly include the angle bracket with the type to consider the template version
	print<int>(6);

	test();

	// function pointer
	void pTest();
	return 0;
}
